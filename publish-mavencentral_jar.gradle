// 配置方式：将此配置加入到Model的gradle配置文件末尾即可(注意：此配置和apply必须在文件尾。否在报错)
//ext {
//    PUBLISH_GROUP_ID = "io.github.15198184721"  //申请的mven的GroupId
//    PUBLISH_ARTIFACT_ID = 'AndroidSandHook'     //项目名,可以理解为除了GroupId之外的二级引用,一般为model名称
//    PUBLISH_VERSION = android.defaultConfig.versionName  //版本号(直接引用了Model的版本号名称)
//}
//
//apply from: "${rootProject.projectDir}/publish-mavencentral.gradle"

buildscript {
    ext {
        kotlin_version = "1.5.10"
        appcompat = "1.3.1"
        dokka_version = '1.4.10.2'
    }
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version" //新添加的这一classpath
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

//------------------------------以下是发布至maven本地的库代码--------------------------------
// 发布maven配置
apply plugin: 'maven'

//上传到本地仓库的命令，上传完成后配置本地仓库路径即可使用,配置方式：
// maven { url("D:\\\\maven\\repo") } //配置本地仓库路径
uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = PUBLISH_GROUP_ID // 唯一标识（通常为模块包名，也可以任意）
            pom.artifactId = PUBLISH_ARTIFACT_ID // 项目名称（通常为类库模块名称，也可以任意）
            pom.version = PUBLISH_VERSION // 版本号
            pom.packaging = 'jar'
            // 配置本地仓库路径(注意系统平台，此为windows路径)
            repository(url: uri("D:\\\\maven\\repo"))
        }
    }
}

//------------------------------以下是发布至maven中央库代码--------------------------------
apply plugin: 'maven-publish'
apply plugin: 'signing'

//已经在config.properties中配置
//ext["signing.keyId"] = ''
//ext["signing.password"] = ''
//ext["signing.secretKeyRingFile"] = ''
//ext["ossrhUsername"] = ''
//ext["ossrhPassword"] = ''

//将源码打包为jar(如果不配置暂不清楚能否发布成功)
task androidSourcesJar(type: Jar) {
    //打包源码(可选,此处配置为不打包源码)
//    classifier = 'sources'
//    from android.sourceSets.main.java.source
}

File secretPropsFile = project.rootProject.file('config.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}
publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            //发布内容包含 .aar 库
            artifact("$buildDir/libs/${project.getName()}.jar")
            //发布打包的源码资源(注释掉：表示不上传源码资源)
//            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = '多牛公司成都分部。基础组件，仅限多牛公司内部使用'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/15198184721/DNCDLibApp.git'
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = '15198184721'
                        name = '15198184721'
                        email = '302748574@qq.com'
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = 'scm:git@github.com:15198184721/DNCDLibApp.git'
                    developerConnection = 'scm:git@github.com:15198184721/DNCDLibApp.git'
                    //分支地址：
                    url = 'https://github.com/15198184721/DNCDLibApp.git'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "AndroidLibrary"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    sign publishing.publications
}