此方式为离线引入为离线引入的方式：
引入参考：
    //示例
    https://github.com/HujiangTechnology/AspectJX-Demo
    //源码
    https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx

【注意点】 如果使用的“gardle”版本为7.0及以上。需要额外操作2步
 -【1】、需要将“settings.gradle”中的“dependencyResolutionManagement”节点移除
 -【2】、再项目根目录的“build.gradle”增加如下节点：
   //由于7.0将所有的仓库配置移动至settings.gradle导致AspectJ可能报错。所以作此修改
   allprojects {
       repositories {
           //仓库地址根据自己需要调整
           google()
           mavenCentral()
           jcenter() // Warning: this repository is going to shut down soon
           maven { url("D:\\\\maven\\repo") }
       }
   }

 说明：以上配置基于参考库的：2.0.9(本地)、2.0.10(远端),更新的版本可能会修复此问题 -[后续验证]

使用方式：

【1】、将"lib_aop"模块中的“plugins”目录复制到项目的根目录(如果在其他位置则"2"中的相关配置路劲也需要更改)
【2】、再项目的根目录“build.gradle“ 添加如下配置：
    dependencies {
        classpath fileTree(dir:'plugins', include:['*.jar'])
        // ...其他配置略
    }
【3】、在“app”模块中加入如下应用插件的配置：
    id 'android-aspectjx'
    或者
    id 'com.hujiang.android-aspectjx'

【4】、在有aop代码的模块引入如下库：
    api 'org.aspectj:aspectjrt:1.9.6'

以下配置可选：

【5】、可以再“app”模块中对“aspectjx”进行配置(和android{}同一层级)：
    注意：
        2.0.0版本之后,旧版本的includeJarFilter和excludeJarFilter命令废弃，不再支持使用
        2.0.0版本的 include,exclude通过package路径匹配class文件及jar文件，
        不再支持通过jar物理文件路径匹配的方式，比如：

    aspectjx {
        //排除所有package路径中包含`android.support`,`androidx`的class文件及库（jar文件）
    	exclude 'android.support','androidx'
        //指定只对含有关键字'universal-image-loader', 'AspectJX-Demo/library'的库进行织入扫描，忽略其他库，提升编译效率
    //    include 'universal-image-loader', 'AspectJX-Demo/library'
    //    ajcArgs '-Xlint:warning'
    }

    注：
        如果以上报错：“zip file is empty”,则可使用一下的aspectjx配置尝试

    aspectjx {
        //排除所有package路径中包含`android.support`,`androidx`的class文件及库（jar文件）
        exclude 'android.support'
        exclude 'androidx'
        exclude 'versions.9'
    //    exclude 'com.squareup'
    //    exclude 'leakcanary'
    //    exclude 'com.taobao'
    //    exclude 'com.ut'
    //    include 'TestAop/lib_aop'
    }